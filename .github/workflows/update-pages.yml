name: Update Pages

on:
  push:
    paths:
      - '**/*.md'  # Учитываем файлы .md в любых папках

jobs:
  update-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Полная история репозитория для получения дат

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          npm install -g @actions/github
          npm install @octokit/rest@18.12.0
          npm install marked
          npm install js-yaml  # Для парсинга frontmatter

      - name: Generate pages.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const { Octokit } = require('@octokit/rest');
            const yaml = require('js-yaml');  // Для парсинга frontmatter
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            // Функция для получения даты создания файла (первый коммит)
            async function getFileCreationDate(owner, repo, filePath) {
              try {
                let earliestCommit = null;
                let page = 1;
                while (true) {
                  const result = await octokit.repos.listCommits({
                    owner,
                    repo,
                    path: filePath,
                    per_page: 100,
                    page: page,
                  });
                  if (result.data.length === 0) break;
                  earliestCommit = result.data[result.data.length - 1]; // Самый ранний коммит на этой странице
                  page++;
                }
                return earliestCommit ? earliestCommit.commit.committer.date : new Date().toISOString();
              } catch (error) {
                console.error('Error fetching commit date for', filePath, error.message);
                return new Date().toISOString();
              }
            }

            // Функция для извлечения frontmatter
            function extractFrontmatter(content) {
              const frontmatterRegex = /^---\n([\s\S]+?)\n---/;
              const match = content.match(frontmatterRegex);
              if (!match) return {};
              try {
                return yaml.load(match[1]) || {};
              } catch (error) {
                console.error('Error parsing frontmatter:', error.message);
                return {};
              }
            }

            // Функция для поиска Markdown-файлов
            function findMarkdownFiles(dir) {
              let results = [];
              const files = fs.readdirSync(dir, { withFileTypes: true });
              for (const file of files) {
                const fullPath = path.join(dir, file.name);
                if (file.isDirectory()) {
                  if (file.name === 'node_modules' || file.name.startsWith('.')) {
                    continue;
                  }
                  results = results.concat(findMarkdownFiles(fullPath));
                } else if (file.name.endsWith('.md')) {
                  results.push(fullPath);
                }
              }
              return results;
            }

            (async () => {
              try {
                const files = findMarkdownFiles('.').map(filePath => ({
                  name: path.basename(filePath),
                  path: filePath
                }));

                console.log('Found files:', files.map(f => f.path));

                const pages = [];
                for (const file of files) {
                  const content = fs.readFileSync(file.path, 'utf8');
                  const slug = file.name.replace('.md', '').toLowerCase().replace(/\s+/g, '-');

                  // Извлекаем frontmatter и ищем дату
                  const frontmatter = extractFrontmatter(content);
                  let date = frontmatter.date;

                  // Если даты в frontmatter нет, получаем дату первого коммита
                  if (!date) {
                    date = await getFileCreationDate('Endermanik13', 'obsidian', file.path);
                  }

                  // Определяем категорию по имени папки
                  const relativePath = file.path.replace(/\\\\/g, '/');
                  const dirName = path.dirname(relativePath) === '.' ? 'безкатегории' : path.basename(path.dirname(relativePath));

                  // Извлекаем заголовок и описание
                  const contentWithoutFrontmatter = content.replace(/^---\n([\s\S]+?)\n---\n?/, '');
                  const titleMatch = contentWithoutFrontmatter.match(/^# (.+)/m);
                  const title = titleMatch ? titleMatch[1] : file.name.replace('.md', '');
                  const description = contentWithoutFrontmatter.split('\n').slice(1).join(' ').substring(0, 100) + '...';

                  pages.push({
                    title: title,
                    slug: slug,
                    description: description,
                    link: 'https://Endermanik13.github.io/obsidian/page/' + slug,
                    category: dirName,
                    content: contentWithoutFrontmatter,
                    date: date
                  });
                }

                // Сортируем страницы по дате
                pages.sort((a, b) => new Date(b.date) - new Date(a.date));
                fs.writeFileSync('pages.json', JSON.stringify(pages, null, 2));
                console.log('Generated pages.json with', pages.length, 'pages');
              } catch (error) {
                console.error('Error in script:', error.message);
                process.exit(1);
              }
            })();
          "

      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add pages.json
          git commit -m "Update pages.json with new pages" || echo "No changes to commit"
          git push
